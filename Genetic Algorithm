import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import random

# --- GRID TANIMI ---
rows, cols = 25, 50
grid = np.zeros((rows, cols))
grid[1, 3] = 1
grid[2, [3, 6]] = 1
grid[3, [3, 6]] = 1
grid[4, 1:4] = 1
grid[4, 5:7] = 1
grid[5, 5] = 1
grid[7, 5:9] = 1
grid[0:14, 20] = 1

start = (0, 0)
goal = (6, 31)


directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
population_size = 5000 
max_steps = 10000
generations = 700
mutation_rate = 0.1




def generate_individual():
    return [random.choice(directions) for _ in range(max_steps)]

def generate_population():
    return [generate_individual() for _ in range(population_size)]

def move(start, moves):
    path = [start]
    x, y = start
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < rows and 0 <= ny < cols and grid[nx, ny] == 0:
            x, y = nx, ny
            path.append((x, y))
            if (x, y) == goal:
                break
        else:
            break
    return path

def fitness(path):
    x, y = path[-1]
    gx, gy = goal
    distance = abs(gx - x) + abs(gy - y)
    if path[-1] == goal:
        return 1000 - len(path)  # Daha kısa yol daha yüksek puan
    return -distance  # Hedefe yakın olana daha yüksek puan (negatif mesafe)

def crossover(p1, p2):
    idx = random.randint(1, max_steps - 2)
    return p1[:idx] + p2[idx:]

def mutate(individual):
    return [random.choice(directions) if random.random() < mutation_rate else m for m in individual]

def genetic_algorithm():
    population = generate_population()
    best_paths = []
    best_path_overall = None
    best_fitness = float('-inf')
    best_generation = 0

    for gen in range(generations):
        paths = [move(start, ind) for ind in population]
        scores = [fitness(p) for p in paths]
        sorted_indices = np.argsort(scores)[::-1]
        population = [population[i] for i in sorted_indices]
        paths = [paths[i] for i in sorted_indices]

        if scores[sorted_indices[0]] > best_fitness:
            best_fitness = scores[sorted_indices[0]]
            best_path_overall = paths[0]
            best_generation = gen

        best_paths.append(paths[0])

        new_population = population[:10]
        while len(new_population) < population_size:
            p1, p2 = random.sample(population[:50], 2)
            child = crossover(p1, p2)
            child = mutate(child)
            new_population.append(child)

        population = new_population

    return best_paths, best_path_overall, best_generation

def animate_paths(paths, final_best_path, best_gen):
    fig, ax = plt.subplots(figsize=(12, 6))
    mat = ax.matshow(grid, cmap='Greys')
    ax.plot(start[1], start[0], 'go', label="Başlangıç")
    ax.plot(goal[1], goal[0], 'ro', label="Hedef")
    title = ax.set_title("Genetik Algoritma ile Yol Bulma")
    ax.legend(loc='upper right')

    def update(frame):
        if frame < len(paths):
            path = paths[frame]
            if path:
                x, y = zip(*path)
                ax.plot(y, x, color='blue', linewidth=1, alpha=0.6)
            if frame == best_gen:
                title.set_text(f"✓ En İyi Nesil: {frame + 1} (Yeşil Yol En Kısa)")
            else:
                title.set_text(f"Genetik Algoritma - Nesil {frame + 1}/{len(paths)}")
        else:
            if final_best_path:
                x, y = zip(*final_best_path)
                ax.plot(y, x, color='lime', linewidth=3, label="En İyi Yol")
                title.set_text(f"✓ En İyi Yol (Yeşil) - Nesil {best_gen + 1}")
        return []

    ani = animation.FuncAnimation(
        fig,
        update,
        frames=len(paths) + 30,
        interval=50,
        blit=False,
        repeat=False
    )
    plt.show()

# --- ÇALIŞTIR ---
paths, best_path, best_gen = genetic_algorithm()
animate_paths(paths, best_path, best_gen)
